#!/usr/bin/env python

import sys
import asyncio
import argparse
from loguru import logger
from sqlalchemy import exists, select
from run_api.database import SessionLocal
from run_api.user.schemas import User
from run_api.chute.schemas import Chute
from run_api.image.schemas import Image
from run_api.instance.schemas import Instance


async def main():
    """
    Seed a user locally.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--username",
        type=str,
        required=True,
        help="Username to add",
    )
    parser.add_argument(
        "--id",
        type=str,
        default=None,
        help="Explicitly set user_id"
    )
    parser.add_argument(
        "--api-key",
        type=str,
        required=True,
        help="API key for the user",
    )
    args = parser.parse_args()

    async with SessionLocal() as session:
        if (
            await session.execute(
                select(exists().where(User.username.ilike(args.username)))
            )
        ).scalar():
            logger.error(f"User with username={args.username} already exists")
            sys.exit(1)
        user = User(username=args.username)
        user.set_api_key(args.api_key)
        if args.id:
            user.user_id = args.id
        session.add(user)
        await session.commit()
    logger.success(
        f"Successfully added user username={args.username} and api_key={args.api_key} user_id={user.user_id}"
    )


if __name__ == "__main__":
    asyncio.run(main())
